using System.Collections.Generic;using UnityEngine;namespace DesertImage.Pools{    public class PoolGameObject : Pool<GameObject>    {        #region PRIVATE        private readonly Transform _parent;        #endregion        #region CONSTRUCTOR        public PoolGameObject(Transform parent)        {            _parent = parent;        }        #endregion        public GameObject getInstance(string baseName)        {            return Get(baseName);        }        public void returnInstance(GameObject obj, GameObject basePrefab)        {            ReturnInstance(obj, basePrefab);        }        public void returnInstance(GameObject obj, string baseName)        {            ReturnInstance(obj, baseName);        }        #region GET        private GameObject Get(string baseName)        {            GameObject obj = null;            foreach (var stack in CachedObjects.Values)            {                var poped = stack.Peek();                if (poped.name != baseName + "(Clone)") continue;                obj = Get(poped);                break;            }            return obj;        }        protected override void GetStuff(GameObject objInstance)        {            GetStuff(objInstance, null);        }        private void GetStuff(GameObject objInstance, Transform parent)        {            objInstance.transform.parent = parent;            objInstance.SetActive(true);            var poolable = objInstance.GetComponent<IPoolable>();            if (poolable != null)            {                poolable.onCreate();            }        }        protected override int GetHash(GameObject obj)        {            return obj.GetHashCode();        }        #endregion        protected void ReturnInstance(GameObject objInstance, GameObject basePrefab)        {            Stack<GameObject> objStack;            if (CachedObjects.TryGetValue(GetHash(basePrefab), out objStack))            {                objStack.Push(objInstance);            }            ReturnStuff(objInstance);        }        protected void ReturnInstance(GameObject objInstance, string baseName)        {            var instance = objInstance;            foreach (var stack in CachedObjects.Values)            {                if (stack.Count == 0) continue;                var popedObj = stack.Peek();                if (popedObj == null) continue;                if (popedObj.name != baseName) continue;                instance = popedObj;                //                stack.Push(objInstance);                break;            }            ReturnInstance(objInstance, instance);        }        #region CREATE / RETURN STUFF        protected override GameObject CreateInstance(GameObject objInstance)        {            if (!objInstance) return null;            var newObj = Object.Instantiate(objInstance, _parent);            ReturnStuff(newObj);            return newObj;        }        protected override void ReturnStuff(GameObject objInstance)        {            objInstance.SetActive(false);            objInstance.transform.parent = _parent;        }        #endregion    }}