using System.Collections.Generic;using UnityEngine;namespace DesertImage.Managers{    public class ManagerEvents : ManagerBase, IAwake    {        #region PRIVATE        private readonly Dictionary<int, List<IListen>> _eventList = new Dictionary<int, List<IListen>>();        #endregion        #region PUBLIC METHODS        public void onAwake()        {            _eventList.Clear();        }        public void add<T>(IListen newListener)        {            Add<T>(newListener);        }        public void remove<T>(IListen listener)        {            Remove<T>(listener);        }        public void send<T>(T arguments = default(T))        {            Send(arguments);        }        public void clear()        {            Clear();        }        #endregion        #region ADD / REMOVE        private void Add<T>(IListen newListener)        {            List<IListen> cachedListeners;            var hash = typeof(T).GetHashCode();            if (_eventList.TryGetValue(hash, out cachedListeners))            {                cachedListeners.Add(newListener);                _eventList[hash] = cachedListeners;                return;            }            _eventList.Add(hash, new List<IListen> {newListener});        }        private void Remove<T>(IListen listener)        {            List<IListen> cachedListeners;            if (!_eventList.TryGetValue(typeof(T).GetHashCode(), out cachedListeners)) return;            var index = cachedListeners.IndexOf(listener);            //TODO: look wisely to this IFs            if (index < cachedListeners.Count && index >= 0)            {                cachedListeners[index] = null;            }//            cachedListeners.Remove(listener);        }        #endregion        private void Clear()        {            _eventList.Clear();        }        #region SEND EVENT        private void Send<T>(T arguments = default(T))        {            List<IListen> cachedListeners;            if (!_eventList.TryGetValue(typeof(T).GetHashCode(), out cachedListeners) &&                !_eventList.TryGetValue(arguments.GetHashCode(), out cachedListeners) &&                !_eventList.TryGetValue(arguments.GetType().GetHashCode(), out cachedListeners)) return;            if (cachedListeners == null) return;            var listenersToRemove = new List<int>();            for (var i = 0; i < cachedListeners.Count; i++)            {                var listener = cachedListeners[i];                if (listener == null)                {                    listenersToRemove.Add(i);                    continue;                }                var lstner = listener as IListen<T>;                if (lstner == null)                {                    Debug.LogError(string.Format("WRONG LISTENER <color=red>{0}</color> in {1}", typeof(T), listener));                    return;                }                lstner.handleCallback(arguments);            }            if (listenersToRemove.Count == 0) return;            for (var i = listenersToRemove.Count - 1; i >= 0; i--)            {                cachedListeners.RemoveAt(listenersToRemove[i]);            }        }        #endregion    }}