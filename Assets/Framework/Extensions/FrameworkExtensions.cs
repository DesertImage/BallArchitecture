using System;using System.Collections.Generic;using DesertImage.Enums;using DesertImage.Managers;using DesertImage.Subjects;using DesertImage.Timers;using UnityEngine;using UnityEngine.UI;using Object = System.Object;using Random = UnityEngine.Random;namespace DesertImage{    public static class FrameworkExtensions    {        #region COLLECTIONS        public static void AddRangeWithoutNulls<T>(this ICollection<T> collection, IEnumerable<T> addingCollection)        {            foreach (var item in addingCollection)            {                if (item == null) continue;                collection.Add(item);            }        }        public static int IndexOf<T>(this T[] array, T element)        {            var index = -1;            for (var i = 0; i < array.Length; i++)            {                var elem = array[i];                if (elem.Equals(element)) continue;                index = i;                break;            }            return index;        }        public static T GetNextElement<T>(this List<T> list, T element)        {            var elem = default(T);            var index = list.IndexOf(element) + 1;            if (index > 0 && index < list.Count)            {                elem = list[index];            }            return elem;        }        public static T GetRandomElement<T>(this T[] array)        {            var rand = default(T);            if (array == null) return rand;            if (array.Length > 0)            {                rand = array[Random.Range(0, array.Length)];            }            return rand;        }        public static T GetRandomElement<T>(this T[,] array)        {            var rand = default(T);            if (array == null) return rand;            if (array.Length > 0)            {                rand = array[Random.Range(0, array.GetLength(0)), Random.Range(0, array.GetLength(1))];            }            return rand;        }        public static T GetRandomElement<T>(this List<T> list)        {            var rand = default(T);            if (list == null) return rand;            if (list.Count > 0)            {                rand = list[Random.Range(0, list.Count)];            }            return rand;        }        public static T GetRandomElement<T>(this List<T> list, int startIndex, int endIndex)        {            var rand = default(T);            if (list.Count <= 0 || startIndex > endIndex) return rand;            rand = list[Random.Range(startIndex, endIndex < list.Count ? endIndex : list.Count - 1)];            return rand;        }        public static T GetRandomElement<T>(this List<T> list, T exceptElement)        {            var rand = default(T);            if (list.Count <= 0) return rand;            rand = list[Random.Range(0, list.Count)];            if (rand.Equals(exceptElement) && list.Count > 1)            {                rand = GetRandomElement(list, exceptElement);            }            return rand;        }        public static T GetRandomElement<T>(this List<T> list, List<T> exceptList)        {            var rand = default(T);            if (list.Count <= 0) return rand;            rand = list[Random.Range(0, list.Count)];            if (exceptList.Contains(rand) && exceptList.Count < list.Count)            {                rand = list.GetRandomElement(exceptList);            }            return rand;        }        public static T GetLast<T>(this List<T> list)        {            var rand = default(T);            return list.Count <= 0 ? rand : list[list.Count - 1];        }        #endregion        #region INTS        public static int GetPercentage(this int value, float percentage)        {            return (int) (value * percentage * .01f);        }        #endregion        #region FLOATS        public static float Jiggle(this float value, float Koef = .7f)        {            return value + Random.Range(-Koef, Koef);        }        public static float Jiggle(this float value, float minKoef, float maxKoef)        {            return value + Random.Range(-Random.Range(minKoef, maxKoef), Random.Range(minKoef, maxKoef));        }        /// <summary>        /// Cheking for random success        /// </summary>        /// <param name="probability"></param>        /// <returns></returns>        public static bool IsSuccess(this float probability)        {            var random = Random.Range(0f, 100f);            return random <= probability;        }        public static float GetPercentage(this float value, float percentage)        {            return value * percentage * .01f;        }        #endregion        #region SPRITES        public static void SetAlpha(this SpriteRenderer sprite, float alpha = 1f, float time = .1f)        {            LeanTween.cancel(sprite.gameObject);            LeanTween.value(                sprite.gameObject,                value =>                {//                    Debug.LogError("color " + sprite.color.a);                    var color = sprite.color;                    color.a = value;                    sprite.color = color;//                    Debug.LogError("set alpha " + color.a);//                    Debug.LogError("target alpha is " + alpha);                },                sprite.color.a,                alpha,                time            );        }        public static void SetAlpha(this SpriteRenderer sprite, float fromAlpha, float alpha, float time = .3f)        {            LeanTween.cancel(sprite.gameObject);            LeanTween.value(                sprite.gameObject,                value =>                {                    var color = sprite.color;                    color.a = value;                    sprite.color = color;                },                fromAlpha,                alpha,                time            );        }        #endregion        #region RENDERERS        public static void SetColor(this Renderer renderer, Color color)        {            var mat = renderer.material;            mat.color = color;            renderer.material = mat;        }        #endregion                #region CANVAS        public static Vector3 WorldToUISpace(this Canvas parentCanvas, Vector3 worldPos)        {            //Convert the world for screen point so that it can be used with ScreenPointToLocalPointInRectangle function            var screenPos = Camera.main.WorldToScreenPoint(worldPos);            Vector2 movePos;            //Convert the screenpoint to ui rectangle local point            RectTransformUtility.ScreenPointToLocalPointInRectangle(parentCanvas.transform as RectTransform, screenPos,                parentCanvas.worldCamera, out movePos);            //Convert the local point to world point            return parentCanvas.transform.TransformPoint(movePos);        }        #endregion        #region VECTORS        public static Vector3 GetRandomOffset(this Vector3 vector, float minOffset = -.5f, float maxOffset = .5f)        {            return new Vector3(vector.x + Random.Range(minOffset, maxOffset),                vector.y + Random.Range(minOffset, maxOffset), vector.z + Random.Range(minOffset, maxOffset));        }        public static Vector2 GetRandomOffset(this Vector2 vector, float minOffset = -1f, float maxOffset = 1f)        {            return new Vector2(vector.x + Random.Range(minOffset, maxOffset),                vector.y + Random.Range(minOffset, maxOffset));        }        public static float GetDistanceTo(this Transform transform, Transform targetTransform)        {            return Vector3.Distance(transform.position, targetTransform.position);        }        public static float GetDistanceTo(this Vector3 vector, Vector3 targetPositiion)        {            return Vector3.Distance(vector, targetPositiion);        }        public static float GetXDistance(this Vector3 vector, Vector3 targetVector)        {            return Mathf.Abs(vector.x - targetVector.x);        }        public static Vector3 SetX(this Vector3 vector, float value)        {            return new Vector3(value, vector.y, vector.z);        }        public static Vector3 SetY(this Vector3 vector, float value)        {            return new Vector3(vector.x, value, vector.z);        }        public static Vector3 SetZ(this Vector3 vector, float value)        {            return new Vector3(vector.x, vector.y, value);        }        public static Vector3 SetX(this Vector2 vector, float value)        {            return new Vector3(value, vector.y);        }        public static Vector3 SetY(this Vector2 vector, float value)        {            return new Vector3(vector.x, value);        }        #endregion        #region QUATERNIONS        public static Quaternion SetY(this Quaternion quaternion, float value)        {            return Quaternion.Euler(new Vector3(quaternion.eulerAngles.x, value, quaternion.eulerAngles.z));        }        public static void SetLocalRotationY(this Transform transform, float value)        {            transform.localRotation = Quaternion.Euler(new Vector3(transform.localRotation.eulerAngles.x, value,                transform.localRotation.eulerAngles.z));        }        #endregion        #region EVENTS        public static void Send<T>(this object sender, T arguments = default(T))        {            var core = Core.Instance;            if (core == null)            {                Debug.LogError("THERE IS NO CORE");                return;            }            var manager = core.get<ManagerEvents>();            if (manager == null)            {                Debug.LogError("THERE IS NO MANAGER EVENT");                return;            }            manager.send<T>(arguments);        }        public static void Listen<T>(this IListen listener)        {            var core = Core.Instance;            if (core == null)            {                Debug.LogError("THERE IS NO CORE");                return;            }            if (!typeof(T).IsValueType)            {                Debug.LogError(string.Format("MAY BE WRONG LISTENER {0} in {1}", typeof(T), listener));            }            var manager = core.get<ManagerEvents>();            if (manager == null)            {                Debug.LogError("THERE IS NO MANAGER EVENT");                return;            }            manager.add<T>(listener);        }        public static void Unlisten<T>(this IListen listener)        {            var core = Core.Instance;            if (core == null)            {                Debug.LogError("THERE IS NO CORE");                return;            }            var manager = core.get<ManagerEvents>();            if (manager == null)            {                Debug.LogError("THERE IS NO MANAGER EVENT");                return;            }            manager.remove<T>(listener);        }        #endregion        #region TIMERS        public static Timer DoActionWithDelay(this object sender, Action action, float delay)        {            var timersManager = Core.Instance.get<ManagerTimers>();            var timer = timersManager.playAction(action, delay);            return timer;        }        #endregion        #region TWEENS        public static LTDescr TweenMove(this Transform transform, Vector3 position, float time = .3f,            LeanTweenType easeType = LeanTweenType.easeOutExpo)        {            if (!transform) return null;            LeanTween.cancel(transform.gameObject);            return LeanTween.move(transform.gameObject, position, time).setEase(easeType);        }        public static LTDescr TweenMove(this Transform transform, Transform targetTransform, float time = .3f,            LeanTweenType easeType = LeanTweenType.easeOutExpo)        {            if (!transform) return null;            LeanTween.cancel(transform.gameObject);            return LeanTween.move(transform.gameObject, targetTransform, time).setEase(easeType);        }        public static LTDescr TweenMoveByParabola(this Transform transform, Vector3 targetPosition,            Vector3 middlePosition,            float time = .3f, LeanTweenType easeType = LeanTweenType.easeOutExpo)        {            if (!transform) return null;            LeanTween.cancel(transform.gameObject);            var startPos = transform.position;            return LeanTween.value(transform.gameObject,                value =>                {                    var move1 = Vector3.Lerp(startPos, middlePosition, value);                    var move2 = Vector3.Lerp(middlePosition, targetPosition, value);                    transform.position = Vector3.Lerp(move1, move2, value);                },                0f,                1f,                time            );        }        public static LTDescr TweenMoveByParabola(this Transform transform, Vector3 targetPosition,            float heightKoef = 3f,            float time = .3f, LeanTweenType easeType = LeanTweenType.easeOutExpo)        {            if (!transform) return null;            LeanTween.cancel(transform.gameObject);            var startPos = transform.position;            var middlePos = startPos + (targetPosition - startPos) / 2 + Vector3.up * heightKoef;            return LeanTween.value(transform.gameObject,                value =>                {                    var move1 = Vector3.Lerp(startPos, middlePos, value);                    var move2 = Vector3.Lerp(middlePos, targetPosition, value);                    transform.position = Vector3.Lerp(move1, move2, value);                },                0f,                1f,                time            );        }        public static LTDescr TweenMoveLocal(this Transform transform, Vector3 position, float time = .3f,            LeanTweenType easeType = LeanTweenType.easeOutExpo)        {            if (!transform) return null;            LeanTween.cancel(transform.gameObject);            return LeanTween.moveLocal(transform.gameObject, position, time).setEase(easeType);        }        public static LTDescr TweenMoveLocalX(this Transform transform, float newX, float time = .3f,            LeanTweenType easeType = LeanTweenType.easeOutExpo)        {            if (!transform) return null;            LeanTween.cancel(transform.gameObject);            return LeanTween.moveLocalX(transform.gameObject, newX, time).setEase(easeType);        }        public static LTDescr TweenMoveLocalX(this Transform transform, float from, float newX, float time = .3f,            LeanTweenType easeType = LeanTweenType.easeOutExpo)        {            if (!transform) return null;            LeanTween.cancel(transform.gameObject);            return LeanTween.moveLocalX(transform.gameObject, newX, time).setFrom(from).setEase(easeType);        }        public static LTDescr TweenMoveY(this Transform transform, float newY, float time = .3f,            LeanTweenType easeType = LeanTweenType.easeOutExpo)        {            if (!transform) return null;            LeanTween.cancel(transform.gameObject);            return LeanTween.moveY(transform.gameObject, newY, time).setEase(easeType);        }        public static LTDescr TweenMoveLocalY(this Transform transform, float newY, float time = .3f,            LeanTweenType easeType = LeanTweenType.easeOutExpo)        {            if (!transform) return null;            LeanTween.cancel(transform.gameObject);            return LeanTween.moveLocalY(transform.gameObject, newY, time).setEase(easeType);        }        public static LTDescr TweenMoveLocalZ(this Transform transform, float newZ, float time = .3f,            LeanTweenType easeType = LeanTweenType.easeOutExpo)        {            if (!transform) return null;            LeanTween.cancel(transform.gameObject);            return LeanTween.moveLocalZ(transform.gameObject, newZ, time).setEase(easeType);        }        public static LTDescr TweenRotate(this Transform transform, Vector3 newRotation, float time = .3f,            LeanTweenType easeType = LeanTweenType.easeOutExpo)        {            return !transform                ? null                : LeanTween.rotate(transform.gameObject, newRotation, time).setEase(easeType);        }        public static LTDescr TweenRotateX(this Transform transform, float newX, float time = .3f,            LeanTweenType easeType = LeanTweenType.easeOutExpo)        {            return !transform                ? null                : LeanTween.rotateX(transform.gameObject, newX, time).setEase(easeType);        }        public static LTDescr TweenRotateLocal(this Transform transform, Vector3 newRotation, float time = .3f,            LeanTweenType easeType = LeanTweenType.easeOutExpo)        {            return !transform                ? null                : LeanTween.rotateLocal(transform.gameObject, newRotation, time).setEase(easeType);        }        public static LTDescr TweenScale(this Transform transform, Vector3 newScale, float time = .3f,            LeanTweenType easeType = LeanTweenType.easeOutExpo)        {            return !transform ? null : LeanTween.scale(transform.gameObject, newScale, time).setEase(easeType);        }        public static LTDescr TweenScale(this Transform transform, Vector3 fromScale, Vector3 newScale,            float time = .3f,            LeanTweenType easeType = LeanTweenType.easeOutExpo)        {            return !transform                ? null                : LeanTween.scale(transform.gameObject, newScale, time).setEase(easeType).setFrom(fromScale);        }        public static LTDescr TweenAlpha(this CanvasGroup canvasGroup, float newAlpha, float time = .3f,            LeanTweenType easeType = LeanTweenType.linear)        {            return !canvasGroup                ? null                : LeanTween.value(canvasGroup.gameObject, value => { canvasGroup.alpha = value; }, canvasGroup.alpha,                        newAlpha, time)                    .setEase(easeType);        }        public static LTDescr TweenAlpha(this Image image, float newAlpha, float time = .3f,            LeanTweenType easeType = LeanTweenType.linear)        {            LeanTween.cancel(image.gameObject);            return !image                ? null                : LeanTween.value(                        image.gameObject,                        value =>                        {                            var color = image.color;                            color.a = value;                            image.color = color;                        },                        image.color.a,                        newAlpha,                        time                    )                    .setEase(easeType);        }        public static LTDescr TweenShake(this Transform transform, float amplitude = .2f, float duration = .42f,            int loopsCount = 1)        {            return LeanTween.rotateAroundLocal(transform.gameObject,                    new Vector3(Random.Range(0f, 1f), Random.Range(0f, 1f), z: Random.Range(0f, 1f)),                    amplitude, duration)                .setEase(LeanTweenType.easeShake)                .setLoopClamp(loopsCount);        }        public static LTDescr TweenShakeZ(this Transform transform, float amplitude = .2f, float duration = .42f,            int loopsCount = 1)        {            return LeanTween.rotateAroundLocal(transform.gameObject,                    Vector3.forward,                    Random.Range(-amplitude - .1f, amplitude + .1f), duration)                .setEase(LeanTweenType.easeShake)                .setLoopClamp(loopsCount);        }        #endregion        #region SUBJECTS        public static void AddToSubjects(this ISubject subject)        {            if (Core.Instance == null) return;            var manager = Core.Instance.get<ManagerSubjects>();            if (manager == null) return;            manager.add(subject);        }        public static void RemoveFromSubjects(this ISubject subject)        {            if (Core.Instance == null) return;            var manager = Core.Instance.get<ManagerSubjects>();            if (manager == null) return;            manager.remove(subject);        }        public static ISubject GetNewSubject(this object sender)        {            if (Core.Instance == null) return null;            var manager = Core.Instance.get<ManagerSubjects>();            return manager == null ? null : manager.getSubject();        }        public static List<ISubject> GetSubjects(this object sender, HashSet<int> filter)        {            if (Core.Instance == null) return null;            var manager = Core.Instance.get<ManagerSubjects>();            return manager == null ? null : manager.getSubjects(filter);        }        #endregion    }}