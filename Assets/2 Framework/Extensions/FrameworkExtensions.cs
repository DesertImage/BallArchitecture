using System;using DesertImage.Managers;using DesertImage.Timers;using Extensions;using UnityEngine;namespace DesertImage.Extensions{    public static class FrameworkExtensions    {        #region INTS        public static int GetPercentage(this int value, float percentage)        {            return (int)(value * percentage * .01f);        }        #endregion        #region SPRITES        public static void SetAlpha(this SpriteRenderer sprite, float alpha = 1f)        {            sprite.color = sprite.color.SetAlpha(alpha);        }        public static void SetAlpha(this SpriteRenderer sprite, float alpha, float time)        {            LeanTween.cancel(sprite.gameObject);            LeanTween.value(                sprite.gameObject,                value =>                {                    var color = sprite.color;                    color.a = value;                    sprite.color = color;                },                sprite.color.a,                alpha,                time            );        }        public static void SetAlpha(this SpriteRenderer sprite, float fromAlpha, float alpha, float time = .3f)        {            LeanTween.cancel(sprite.gameObject);            LeanTween.value(                sprite.gameObject,                value =>                {                    var color = sprite.color;                    color.a = value;                    sprite.color = color;                },                fromAlpha,                alpha,                time            );        }        #endregion        #region RENDERERS        public static void SetColor(this Renderer renderer, Color color)        {            var mat = renderer.material;            mat.color = color;            renderer.material = mat;        }        #endregion        #region QUATERNIONS        public static Quaternion SetY(this Quaternion quaternion, float value)        {            return Quaternion.Euler(new Vector3(quaternion.eulerAngles.x, value, quaternion.eulerAngles.z));        }        public static Quaternion SetX(this Quaternion quaternion, float value)        {            return Quaternion.Euler(new Vector3(value, quaternion.eulerAngles.y, quaternion.eulerAngles.z));        }        public static Quaternion SetZ(this Quaternion quaternion, float value)        {            return Quaternion.Euler(new Vector3(quaternion.eulerAngles.x, quaternion.eulerAngles.y, value));        }        public static void SetLocalRotationY(this Transform transform, float value)        {            var locRot = transform.localRotation;            transform.localRotation = Quaternion.Euler(new Vector3(locRot.eulerAngles.x, value, locRot.eulerAngles.z));        }        #endregion        #region TIMERS        public static Timer DoActionWithDelay(this object sender, Action action, float delay,            bool ignoreTimescale = false)        {            var timersManager = Core.Instance?.Get<ManagerTimers>();            return timersManager?.PlayAction(action, delay, ignoreTimescale);        }        public static Timer DoActionWithDelay(this Action action, float delay,            bool ignoreTimescale = false)        {            var timersManager = Core.Instance.Get<ManagerTimers>();            var timer = timersManager.PlayAction(action, delay, ignoreTimescale);            return timer;        }        #endregion    }}